CLIENT SERVER MODEL:
	client needs to know the existence and address of server as server listens for requests
	can send and receive information once connection is established
	socket is one end of an interprocess communication channel
	establish a socket on client and server side:
		client side
			1. create a socket with socket() system call
			2. connect socket to address of server using connect() system calls
			3. send and receive data i.e. using read() and write() system calls
		server side
			1. create a socket with socket() system call
			2. bind socket to an address using bind(): consists of port number on host machine
			3. listen for connections with listen() systemm calls
			4. accept a connection with accept() system call (blocks until a client connects with the server)
			5. send and receive data
		i.e. server 10000, client localhost 10000
	
	breakdown of client.c and server.c
	http://www.linuxhowtos.org/C_C++/socket.htm
	SERVER
	#include <stdio.h> // input and output
	#include <sys/types.h> // definitions of number of data types used in system calls
	#include <sys/socket.h> // definitions of structures needed for sockets
	#include <netinet/in.h> // constants and structures needed for internet domain addresses
	
	void error(char *msg) {
		perror(msg);
		exit(1);
	}	// called when system call fails, error on stderr then aborts program
	
	int main(int argc, char *argv[])
	{
		// sockfd and newsockfd are file descriptors, store values returned by socket and accept system calls
		// portno = portnumber on which server accepts connections
		// clilen = size of address of client needed for accept()
		// n is return value for read() and write() calls for number of characters read or written
		int sockfd, newsockfd, portno, clilen, n;
		
		char buffer[256];
		struct sockaddr_in serv_addr, cli_addr; // struct contains internet address (netinet/in.h), sin_family = AF_INET
		if (argc < 2) // exits if no port number provided in second argument
		{
			fprintf(stderr, "ERRROR, no port provided");
			exit(1);
		}
		
		// address domain (unix for two processes which share a common file system, internet)
		// type of socket (continuous stream as from file or pipe vs. datagram read in chunks)
		// protocol (0 arg means the OS will choose most appropriate protocol -> TCP for stream sockets and UDP for datagram sockets)
		sockfd = socket(AF_INET, SOCK_STREAM, 0); // returns -1 upon failure
		if (sockfd < 0)
			error("ERROR opening socket");
		
		bzero((char *) &serv_addr, sizeof(serv_addr)); // sets all values in buffer to 0-> pointer to buffer and size of buffer
		
		// get port number on which server will listen for connections
		portno = atoi(argv[1]); // convert from string of digits to integer
		serv_addr.sin_family = AF_INET; // set address family to internet one
		serv_addr.sin_port = htons(portno); // copy port number but first convert to network byte order (big endian) from host byte order (little endian)
		serv_addr.sin_addr.s_addr = INADDR_ANY; // IP address of host on which server is running
		
		// binds socket to an address of current host and port number on which the server will run
		// args: fd, address to which is bound, size of address to which is bound
		if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
			error("ERROR on binding");
		
		// args: fd, size of backlog queue (number of connections that can be waiting while the process is handling a particular connection, 5 is usually max)
		listen(sockfd, 5);
		
		// accept causes the process to block until a client connects to the server, wakes up after connection established
		// returns fd to communicate on this connection
		clilen = sizeof(cli_addr);
		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
		if (newsockfd < 0)
			error("ERROR on accept");
		
		// uses new fd returned by accept, read blocks until something is to be read in the socket after client has executed a write()
		bzero(buffer, 256);
		n = read(newsockfd, buffer, 255);
		if (n < 0) error("ERROR reading from socket");
		printf("Here is the message: %s", buffer);
		
		// write short message to client in response
		n = write(newsockfd, "I got your message", 18);
		if (n < 0) error("ERROR writing to socket");
		
		return 0;
	}
	
	CLIENT
	#include <stdio.h>
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <netdb.h> // defines hostent
	
	void error(char *msg)
	{
		perror(msg);
		exit(0);
	}
	int main(int argc, char *argv[])
	{
		int sockfd, portno, n;
		struct sockaddr_in serv_addr;
		struct hostent *server; // host computer on the Internet
		
		char buffer[256];
		if (argc < 3)
		{
			fprintf(stderr, "usage %s hostname port", argv[0]);
			exit(0);
		}
		portno = atoi(argv[2]);
		sockfd = socket(AF_INET, SOCK_STREAM, 0);
		if (sockfd < 0)
			error("ERROR opening socket");
		
		server = gethostbyname(argv[1]); // get information about host, char *h_addr contains the IP address
		if (server == NULL)
		{
			fprintf(stderr, "ERROR, no such host");
			exit(0);
		}
		
		// copy server address into serv_addr
		bzero((char *) &serv_addr, sizeof(serv_addr));
		serv_addr.sin_family = AF_INET;
		bcopy((char *)server>h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
		serv_addr.sin_port = htons(portno);
		
		// called by client to establish connection to server, returns -1 if fail/0 on success
		// fd, address of host to which it wants to connect (include portno), size of address
		if (connect(sockfd, &serv_addr, sizeof(serv_addr)) < 0)
			error("ERROR connection");
		
		// Read message from stdin using fgets, write message to server socket, read reply from socket and display onto screen
		printf("Please enter the message: ");
		bzero(buffer, 256);
		fgets(buffer, 255, stdin);
		n = write(sockfd, buffer, strlen(buffer));
		if (n < 0)
			error("ERROR writing to socket");
		bzero(buffer, 256);
		n = read(sockfd, buffer, 255);
		if (n < 0)
			error("ERROR reading from socket");
		printf("%s", buffer);
		return 0;
	}
	
	Single Process Concurrent Servers
		server handling several clients simultaneously, each connection I/O dominated
		one process maintains a number of open connections and listens at each for a message
		use the select system call
	
	
	
	HTTP Request Message
	i.e.
		GET / HTTP/1.1
		Host: localhost:1337	
		User-Agent: Mozilla/5.0 (X11; Linux i686; rv:7.0.1) Gecko/20100101 Firefox/7.0.1
		Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
		Accept-Language: en-us,en;q=0.5
		Accept-Encoding: gzip, deflat
	
	// GET method used when browser request an object, with the requested object identified in the URL field
	GET /somedir/page.html HTTP/1.1  // request line (method, URL, HTTP version field)
	Host: www.someschool.edu		// header lines, host at which object resides
	Connection: close		// no persistent connections, close after sending the requested object
	User-agent: Mozilla/5.0	// browser type that is making request to the server
	Accept-language: fr
	
	HTTP Response Message
		HTTP/1.1 200 OK		// initial status line (protocol version field, status code, corresponding status message)
		Connection: close	// six header lines
		Date: Tue, 09 Aug 2011 15:44:04 GMT // time and date when HTTP response was created and sent by the server
		Server: Apache/2.2.3 (CentOS) // analogous to user-agent line, generated by Apache web server
		Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT // time and date when object was created or last modified, critical for object caching
		Content-Length: 6821 // number of bytes in the object being sent
		Content-Type: text/html // indicates that the object in entity body is HTML text
		(data data data...) // entity body, contains requested object itself
	
	200 OK: request succeeded and the information is returned in the response
	400 Bad Request: request could not be understood by the server
	404 Not Found: requested document doesn't exist on this server