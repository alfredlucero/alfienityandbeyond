>>> import numpy as np
>>> 
>>> n = 4
>>> 
>>> import itertools
>>> perm_generator = itertools.permutations(range(n))
>>> 
>>> Perm = np.array([p for p in perm_generator])
>>> # Perm is a  24 x 4  table of all permutations of size 4
... 
>>> 
>>> Ident = np.eye(n)
>>> 
>>> P = np.zeros((n,n,n))
>>> 
>>> for i in range(n):
...    P[:,:,i] = Ident[ :, Perm[i,:] ]
...    #  P(:,:,i) is the i-th permutation matrix:
...    #    the Identity matrix with columns permuted into Perm(i)
... 
>>> Perm[0:3, :]   # the first 3 permutations
array([[0, 1, 2, 3],
       [0, 1, 3, 2],
       [0, 2, 1, 3]])
>>> 
>>> P1 = P[:,:,0]  # the identity permutation
>>> P2 = P[:,:,1]  # the permutation that interchanges 2 and 3
>>> P3 = P[:,:,2]  # the permutation that interchanges 1 and 2
>>> 
>>> x = np.arange(4).T
>>> 
>>> P1.dot(x)
array([ 0.,  1.,  2.,  3.])
>>> 
>>> P2.dot(x)
array([ 0.,  1.,  3.,  2.])
>>> 
>>> P3.dot(x)
array([ 0.,  2.,  1.,  3.])
>>> 
>>> P2.dot(P3)
array([[ 1.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  1.],
       [ 0.,  1.,  0.,  0.]])
>>> 
>>> P2.dot(P3).dot(x)
array([ 0.,  2.,  3.,  1.])
>>> 
>>> P3.dot(P2)
array([[ 1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.],
       [ 0.,  1.,  0.,  0.],
       [ 0.,  0.,  1.,  0.]])
>>> 
>>> P3.dot(P2).dot(x)
array([ 0.,  3.,  1.,  2.])
>>> 

