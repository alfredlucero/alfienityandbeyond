>>> import numpy as np
>>> 
>>> x = np.array([ 1, 3+2j ])      #  a vector
>>> y = np.array([[1],[3+2j]])     #  explicitly: a column vector
>>> 
>>> x.shape                        #  obtain the dimensions of x
(2,)
>>> y.shape                        #  obtain the dimensions of y
(2, 1)
>>> 
>>> A = np.array([[1,2+2j],[3,4]]) #  a 2x2 matrix -- whose rows are [1 2+2i] and [3 4]
>>> 
>>> A.size                         #  obtain the dimensions of A
4
>>> 
>>> B = A.T                        #  the ordinary transpose of A
>>> A.dot(B)                       #  product of A and B  (a matrix)
array([[  1.+8.j,  11.+8.j],
       [ 11.+8.j,  25.+0.j]])
>>> A.dot(x.T)                     #  product of A and x  (a vector)
array([  3.+10.j,  15. +8.j])
>>> 
>>> A.T.conj()                     #  the conjugate transpose (Hermitian transpose) of A
array([[ 1.-0.j,  3.-0.j],
       [ 2.-2.j,  4.-0.j]])
>>> A.conj().T                     #  the conjugate transpose (Hermitian transpose) of A
array([[ 1.-0.j,  3.-0.j],
       [ 2.-2.j,  4.-0.j]])
>>> A.T - A.T.conj()               #  the difference between A's transpose and A's conjugate transpose
array([[ 0.+0.j,  0.+0.j],
       [ 0.+4.j,  0.+0.j]])
>>> np.imag(A+A.conj())            #  imag(z) is the imaginary part of z; so imag(A + A.conj()) should be zero
array([[ 0.,  0.],
       [ 0.,  0.]])
>>> 
>>> z = np.array([[1+2j],[0-3j]])  #  a column vector of complex values
>>> z.T.conj()                     #  the corresponding complex conjugate row vector
array([[ 1.-2.j,  0.+3.j]])
>>> 
>>> x = np.array([1, 0])           #  a real row vector (1x2 matrix)
>>> x.transpose()                  #  a column vector   (2x1 matrix)
array([1, 0])
>>> x.T                            #  a column vector   (2x1 matrix)
array([1, 0])
>>> 
>>> np.arange(5)                   #  the row vector of values from 0 to 4
array([0, 1, 2, 3, 4])
>>> np.arange(5).T                 #  the column vector of values from 0 to 4
array([0, 1, 2, 3, 4])
>>> 
>>> np.arange(0,5)                 #  the row vector of values from 0 to 4
array([0, 1, 2, 3, 4])
>>> np.arange(0, 5, 2)             #  the row vector of values from 0 to 4, with steps of size 2
array([0, 2, 4])
>>> np.array([1,3,5])              #  the same thing
array([1, 3, 5])
>>> np.array([[1],[3],[5]]).T      #  the same thing
array([[1, 3, 5]])
>>> 
>>> np.arange(1.3, 4.3)            #  the row vector [ 1.3  2.3  3.3 ]
array([ 1.3,  2.3,  3.3])
>>> 
>>> np.linspace(1.3, 3.8, 6)       #  row vector of length 6 with equispaced values from 1.3 to 3.8
array([ 1.3,  1.8,  2.3,  2.8,  3.3,  3.8])
>>> np.arange(1.3, 4.8, 0.5)       #  the same thing (using steps of size 0.5)
array([ 1.3,  1.8,  2.3,  2.8,  3.3,  3.8,  4.3])
>>> 
>>> x = np.array([[1],[0]])        #  a column vector (2x1 matrix)
>>> x**2                           #  the column vector of squares of elements in x
array([[1],
       [0]])
>>> 
>>> #  x.dot(x)                    #  ERROR
... x.T.dot(x)                     #  dot product of x with itself
array([[1]])
>>> 
>>> A = np.array([[1,2],[3,4]])    #  a 2x2 matrix -- whose rows are [1 2] and [3 4]
>>> np.reshape(A,(4,1))            #  the 4x1 matrix obtained by inserting the elements of A column-wise
array([[1],
       [2],
       [3],
       [4]])
>>> 
>>> A + A                          #  sum of A with itself
array([[2, 4],
       [6, 8]])
>>> 
>>> A.dot(x)                       #  the product of A with x
array([[1],
       [3]])
>>> 
>>> A.dot(A)                       #  product of A with itself
array([[ 7, 10],
       [15, 22]])
>>> A**2                           #  a matrix whose elements are squares of corresponding elements in A
array([[ 1,  4],
       [ 9, 16]])
>>> A*A                            #  a matrix whose elements are squares of corresponding elements in A
array([[ 1,  4],
       [ 9, 16]])
>>> 
>>> A.dot(A.dot(A))                #  cube of A
array([[ 37,  54],
       [ 81, 118]])
>>> A.dot(A).dot(A)                #  cube of A
array([[ 37,  54],
       [ 81, 118]])
>>> 
>>> np.trace(A)                    #  trace of A
5
>>> np.linalg.det(A)               #  determinant of A
-2.0000000000000004
>>> np.linalg.inv(A)               #  inverse of A
array([[-2. ,  1. ],
       [ 1.5, -0.5]])
>>> np.matrix(A).I.A               #  inverse of A
array([[-2. ,  1. ],
       [ 1.5, -0.5]])
>>> 
>>> np.linalg.det(A) * np.linalg.inv(A)  #  product of the scalar det(A) with the inverse of A
array([[ 4., -2.],
       [-3.,  1.]])
>>> A.dot(np.linalg.inv(A))        #  product of A with its inverse
array([[  1.00000000e+00,   1.11022302e-16],
       [  0.00000000e+00,   1.00000000e+00]])
>>> np.linalg.inv(A).dot(A)        #  product of the inverse of A with A
array([[  1.00000000e+00,   4.44089210e-16],
       [  0.00000000e+00,   1.00000000e+00]])
>>> np.linalg.pinv(A) .dot(A)      #  product of the pseudo-inverse of A with A
array([[  1.00000000e+00,  -8.88178420e-16],
       [ -4.44089210e-16,   1.00000000e+00]])
>>> 
>>> B = np.hstack((A,A))           #  the 2x4 matrix with 2 horizontal copies of A
>>> AAA = np.hstack((A,A,A))       #  the 2x6 matrix with 3 horizontal copies of A
>>> C = np.vstack((AAA,AAA))       #  the 4x6 matrix with 2x3 stacked copies of A
>>> 
>>> B[0:2, 0:2]                    #  the upper left  2x2 submatrix of B (which equals A)
array([[1, 2],
       [3, 4]])
>>> C[2:4, 2:6]                    #  the lower right 2x4 submatrix of B (which equals B)
array([[1, 2, 1, 2],
       [3, 4, 3, 4]])
>>> B - C[0:2][:,0:4]
array([[0, 0, 0, 0],
       [0, 0, 0, 0]])
>>> 
>>> np.eye(2)                      #  the 2x2 identity matrix (terrible pun)
array([[ 1.,  0.],
       [ 0.,  1.]])
>>> np.eye(8)                      #  the 8x8 identity matrix
array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]])
>>> 
>>> np.zeros(3)                    #  a 1x3 matrix of zeros
array([ 0.,  0.,  0.])
>>> np.zeros((3,2))                #  a 3x2 matrix of zeros
array([[ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.]])
>>> 
>>> np.ones((3,2))                 #  a 3x2 matrix of ones
array([[ 1.,  1.],
       [ 1.,  1.],
       [ 1.,  1.]])
>>> 
>>> np.random.rand(3,2)            #  a 3x2 matrix of uniform random values
array([[ 0.16461215,  0.70661766],
       [ 0.86165878,  0.6685205 ],
       [ 0.09913461,  0.20610144]])
>>> np.random.rand(3)              #  a 1x3 matrix of uniform random values
array([ 0.01033914,  0.04994085,  0.34015208])
>>> 
